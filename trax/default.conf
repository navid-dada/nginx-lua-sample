lua_package_path '/usr/local/openresty/site/lualib/resty/?.lua;lua-resty-kafka/lib/?.lua;/etc/nginx/conf.d/?.lua;/usr/local/openresty/lualib/?/init.lua;;';

init_worker_by_lua_block {
   require("unique_id");
   unique_id.init();

   require("kafka");

   ck = require "resty.cookie"
   redis = require "resty.redis"
   cjson = require "cjson"
   frox = require "frox"

   REDIS_SERVER = os.getenv("REDIS_SERVER")
   REDIS_PORT = os.getenv("REDIS_PORT")
   REDIS_AUTH_KEY = os.getenv("REDIS_AUTH_KEY")
   KAFKA_SERVER = os.getenv("KAFKA_SERVER")
   KAFKA_PORT = os.getenv("KAFKA_PORT")

}


server {
        server_name lua;
        listen 8053;
        access_log  off;
        default_type text/plain;
        location /hellolua {
            content_by_lua '
                    ngx.say("hello world!!!");
                ';
        }
        
        location ~ ^/bid-result/(?<reqid>[^/]+)/?$ {
            content_by_lua_block {
                local key= "dsp_bid-requests:" .. ngx.var.reqid .. ":response"

                local red = redis:new()
                local ok, err = red:connect(REDIS_SERVER, REDIS_PORT)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                local res, err = red:auth(REDIS_AUTH_KEY)
                if not res then
                    ngx.log(ngx.ERR, err)
	            	return
                end	

                local res, err = red:get(key)
                if not res then
                    ngx.say("failed to get "..ngx.var.reqid..": ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say(ngx.var.reqid .. " not found.")
                    return
                end

                ngx.say(ngx.var.reqid .. " : ".. res)
                
            }
        }
        

        location /bid-request {
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                kafka.sendmessage("DspBidRequestedIntegrationEvent", body)
                ngx.say("hello")
            } 
        }


        location /sync-request {
            content_by_lua_block {
                ngx.req.read_body()
                local body = cjson.decode(ngx.req.get_body_data())
                kafka.send("DspBidRequestedIntegrationEvent", body)


                local red = redis:new()
                local ok, err = red:connect(REDIS_SERVER, REDIS_PORT)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                local res, err = red:auth(REDIS_AUTH_KEY)
                if not res then
                    ngx.log(ngx.ERR, err)   
	                return
                end	
                local retry = 0;

                local res, err = red:get(body.id)
                while retry < 20 and res == ngx.null do
                    ngx.say("try to get response")
                    res, err = red:get(body.id)
                    if not res then
                        ngx.say("failed to get req_id: ", err)
                        return
                    end
                    os.execute(package.config:sub(1,1) == "/" and "sleep 0.2" or "timeout 0.2")
                    retry = retry + 1
                end
                if res == ngx.null then 
                    ngx.say("no response")
                    return
                end
                ngx.say("response: ", res)
            }
        }



        
    }   



